--------------------------------------------------------------------------------------------------------------------------------------------------------
      name:  <unnamed>
       log:  C:\Users\Achim.Ahrens\Dropbox\statalasso\Lassopack_MC\out11\mc_log_p220_alter1_design2_bigp.log
  log type:  text
 opened on:  23 Oct 2018, 19:47:10

. 
. cd
C:\Users\Achim.Ahrens\Dropbox\statalasso\Lassopack_MC

. 
. which lasso2
c:\ado\plus\l\lasso2.ado
*! lasso2 1.0.06 4sep2018
*! authors aa/ms

. which cvlasso
c:\ado\plus\c\cvlasso.ado
*! lassocv 1.0.06 22apr2018
*! authors aa/ms

. which rlasso
c:\ado\plus\r\rlasso.ado
*! rlasso 1.0.07 29aug2018
*! authors aa/cbh/ms

. which lassoutils
c:\ado\plus\l\lassoutils.ado
*! lassoutils 1.0.14 5sep2018
*! authors aa/cbh/ms

. 
. * p is equal to:
. di `thep'
220

. * design:
. di `thedesign'
2

. * alternating beta
. di `thealternate'
1

. 
. set seed 666 // the number of the beast

. 
. * program to calculate L1 error
. cap program drop comparevec

. program define comparevec , rclass
  1.         syntax ,  TRUEMATname(string) ESTMATname(string) 
  2.         
.         tempname truemat estmat 
  3.         mat `truemat'   = `truematname'
  4.         mat `estmat'    = `estmatname'
  5. 
.         // compare dim
.         local ptrue = colsof(`truemat')
  6.         local pest  = colsof(`estmat')
  7.         assert `ptrue'==`pest'
  8.         
.         // don't include constant in L1-norm 
.         // constant is always in last column of estimated beta and true beta
.         local pcheck = `pest' - 1
  9. 
.         
.         local l1norm = 0
 10.         forvalues i = 1(1)`pcheck' {
 11.                 local l1norm = `l1norm' + abs(el(`truemat',1,`i')-el(`estmat',1,`i'))
 12.         }
 13.         return scalar l1norm = `l1norm' // l1 norm
 14.         
. end

. 
. * program to calculate rmse
. cap program drop getrmse

. program define getrmse , rclass
  1.         syntax varlist(min=2 max=2) , ///
>                         esample(varlist min=1 max=1) // estimation smpl
  2.         
.         local xb                : word 1 of `varlist'
  3.         local xbhat     : word 2 of `varlist'
  4.         
.         // calculate in-sample rmse
.         tempvar pe 
  5.         gen double `pe' = (`xb'-`xbhat')^2 if `esample'==1
  6.         sum `pe', meanonly
  7.         local rmse = sqrt(r(mean))
  8.         
.         // calculate out-of-sample rmse
.         tempvar pe_oos
  9.         gen double `pe_oos' = (`xb'-`xbhat')^2 if `esample'==0
 10.         sum `pe_oos', meanonly
 11.         local rmse_oos = sqrt(r(mean))
 12.         
.         return scalar rmse = `rmse'                      
 13.         return scalar rmse_oos = `rmse_oos'
 14. end

. 
. cap program drop makebAll

. program define makebAll, rclass
  1. 
.         syntax , best(string) allvars(string)
  2.         
.         // number of vars (incl constant)
.         local p : word count `allvars'
  3. 
.         tempname b bAll 
  4.         mat `b' = `best'
  5.         
.         // selected vars
.         local sel : colnames `b'
  6.         
.         // create empty full beta vector
.         mat `bAll' = J(1,`p',0)
  7.         mat colnames `bAll' = `allvars'
  8.         
.         // fill long beta vector
.         foreach i of local sel {
  9.                 //di "`i'"
.                 local bix = colnumb(`b',"`i'")
 10.                 local bAllix = colnumb(`bAll',"`i'")
 11.                 mat `bAll'[1,`bAllix']=`b'[1,`bix']
 12.         }
 13.         //mat list `bAll'
.         
.         // return
.         return matrix bAll = `bAll'
 14.         return local sel `sel'
 15.         //return scalar p = `p'
. end 

. 
. cap program drop mysim

. program define mysim, rclass
  1.      syntax [, obs(integer 100)         /// total number of obs
>                                 tobs(integer 50)        /// size of estimation sample
>                                 p(integer 30)           /// ex constant
>                                 design(integer 1)       /// 1 or 2
>                                 s(integer 20)           /// sparsity (only relevant if design=1)
>                                 delta(real 0.9)         /// determines rate at which beta decreases
>                                                                         /// (only relevant if design!=1)
>                                 theta(real 0.9)         /// determines corr of X
>                                 sigma(real 1)           ///
>                                 ALTernate(integer 1) ]
  2. 
.         drop _all
  3.         
.         set obs `obs'
  4.         
.         ** create beta
.         tempname BETA
  5.         if (`design'==1) {
  6.                 // sparse beta
.                 mat `BETA' = J(1,`p'+1,0)
  7.                 forvalues j=1(1)`s' {
  8.                         mat `BETA'[1,`j'] = 1
  9.                 }
 10.                 *
.                 mat `BETA'[1,`p'+1] = 1 // constant
 11.         }
 12.         else {
 13.                 // dense beta
.                 // with beta(j)=(delta)^j and delta<1
.                 mat `BETA' = J(1,`p'+1,0)
 14.                 forvalues j=1(1)`p' {
 15.                         mat `BETA'[1,`j'] = (`delta')^(`j')
 16.                 }
 17.                 *
.                 mat `BETA'[1,`p'+1] = 1 // constant     
 18.         }
 19.         *
.         
.         // correlation matrix
.         // theta controls the degree of correlation in X
.         tempname CORR
 20.         tempname cvec Cmat
 21.         mata: `cvec'=J(1,`p',0)
 22.         mata: for (i=1; i<=`p'; i++) `cvec'[1,i]=(`theta')^(i-1)
 23.         mata: `Cmat'=Toeplitz((`cvec')',`cvec')
 24.         mata: st_matrix("`CORR'",`Cmat')        
 25.         *
.         
.         ************* generate data ************************************************
.         // gen e
.         gen double e = rnormal()*`sigma'
 26.         // create x
.         drawnorm x1-x`p' , double corr(`CORR')
 27.         // create xb
.         gen double f = el(`BETA',1,`p'+1) // = the intercept (in last column)
 28.         forvalues j=1(1)`p' {
 29.                 replace f = f + x`j'*el(`BETA',1,`j')*(`alternate')^(`j')
 30.         }
 31.         // generate y
.         gen y = f + e 
 32.         drop e 
 33.         drop f
 34.         // estimation and validation sample
.         tempvar esample vsample
 35.         gen `esample' = 0
 36.         replace `esample' = 1 if _n <= `tobs'
 37.         gen `vsample' = 0 
 38.         replace `vsample' = 1 if _n > `tobs'
 39.         ************* generate data end ********************************************
.         
.         // oracle estimator
.         if (`design'==1) {
 40.                 reg y x1-x`s' if `esample'
 41.                 tempvar xb_oracle
 42.                 predict double `xb_oracle', xb
 43.                 mat beta_oracle = e(b)
 44.                 // add zeros to create full/large beta vector
.                 mat zeros = J(1,`p'-`s',0) 
 45.                 mat beta_oracle = (beta_oracle[1,1..`s'],zeros,beta_oracle[1,`s'+1])
 46.                 local shat_oracle = `s'
 47.                 ds x1-x`s'
 48.                 local sel_oracle = r(varlist)
 49.                 local oraclelocal oracle
 50.         }
 51.         else {
 52.                 local oraclelocal
 53.         }
 54.         *
.         
.         // stepwise
.         if (`p'<`tobs') { // only if p<n
 55.                  timer on 11
 56.                 stepwise, pr(.1): reg y x1-x`p' if `esample'
 57.                  timer off 11
 58.                 local shat_swise = e(df_m)
 59.                 tempvar xb_swise
 60.                 predict double `xb_swise', xb
 61.                 ds x1-x`p'
 62.                 local allreg = r(varlist) // list of regressors
 63.                 mat beta_swise0 = e(b) // "reduced" beta without zeros
 64.                 makebAll , best(beta_swise0) allvars("`allreg' _cons") // convert to long beta with zeros
 65.                 mat beta_swise = r(bAll)
 66.                 local sel_swise = r(sel)
 67.                 local swiselocal swise
 68.         }
 69.         else {
 70.                 local swiselocal
 71.         }
 72.         *
.         
.         // rlasso
.         ereturn clear
 73.          timer on 1
 74.         rlasso y x1-x`p' if `esample'
 75.          timer off 1
 76.         local shat_rlasso = e(s)
 77.         local sel_rlasso = e(selected)
 78.         tempvar xb_rlasso xb_rlasso_ols
 79.         predict double `xb_rlasso', xb
 80.         predict double `xb_rlasso_ols', xb ols
 81.         mat beta_rlasso         = e(betaAll)
 82.         mat beta_rlasso_ols     = e(betaAllOLS)
 83.         
.         // sqrt rlasso
.         ereturn clear
 84.          timer on 2
 85.         rlasso y x1-x`p' if `esample', sqrt
 86.          timer off 2
 87.         local shat_sqrt = e(s)
 88.         local sel_sqrt = e(selected)
 89.         tempvar xb_sqrt xb_sqrt_ols
 90.         predict double `xb_sqrt', xb
 91.         predict double `xb_sqrt_ols', xb ols
 92.         mat beta_sqrt           = e(betaAll)
 93.         mat beta_sqrt_ols       = e(betaAllOLS)
 94.         
.         // rlasso with xdep
.         ereturn clear
 95.          timer on 3
 96.         rlasso y x1-x`p' if `esample', xdep
 97.          timer off 3
 98.         local shat_rxdep = e(s)
 99.         local sel_rxdep = e(selected)
100.         tempvar xb_rxdep xb_rxdep_ols
101.         predict double `xb_rxdep', xb
102.         predict double `xb_rxdep_ols', xb ols
103.         mat beta_rxdep  = e(betaAll)
104.         mat beta_rxdep_ols      = e(betaAllOLS)
105.         
.         // sqrt rlasso with xdep
.         ereturn clear
106.          timer on 4
107.         rlasso y x1-x`p' if `esample', sqrt xdep
108.          timer off 4
109.         local shat_sxdep = e(s)
110.         local sel_sxdep = e(selected)
111.         tempvar xb_sxdep xb_sxdep_ols
112.         predict double `xb_sxdep', xb
113.         predict double `xb_sxdep_ols', xb ols
114.         mat beta_sxdep          = e(betaAll)
115.         mat beta_sxdep_ols      = e(betaAllOLS)
116. 
.         /*// cvlasso
>         ereturn clear
>          timer on 5
>         cvlasso y x1-x`p' if `esample', ///
>                                 lopt postest nfolds(5) nopath alpha(1)
>          timer off 5
>         local shat_cvlasso = e(s)
>         local sel_cvlasso = e(selected)
>         tempvar xb_cvlasso xb_cvlasso_ols
>         predict double `xb_cvlasso', xb
>         predict double `xb_cvlasso_ols', xb ols
>         mat beta_cvlasso                = e(betaAll)
>         mat beta_cvlasso_ols    = e(betaAllOLS)
>         */
.         
.         /*// cv+ridge
>         ereturn clear
>          timer on 6
>         cvlasso y x1-x`p' if `esample', ///
>                                 lopt postest nfolds(5) nopath alpha(0)
>          timer off 6
>         local shat_cvridge = e(s)
>         local sel_cvridge = e(selected)
>         tempvar xb_cvridge 
>         predict double `xb_cvridge', xb
>         mat beta_cvridge        = e(betaAll)
>         local cvridgelocal cvridge
>         */
.         
.         // cv+elastic
.         /*
>         ereturn clear
>         timer on 7
>         cvlasso y x1-x`p' if `esample', ///
>                                 lopt postest nfolds(5) nopath alpha(0 0.1 0.5 0.9 1)
>         timer off 7
>         local shat_cvelastic = e(s)
>         local sel_cvelastic = e(selected)
>         tempvar xb_cvelastic xb_cvelastic_ols
>         predict double `xb_cvelastic', xb
>         predict double `xb_cvelastic_ols', xb ols
>         mat beta_cvelastic              = e(betaAll)
>         mat beta_cvelastic_ols  = e(betaAllOLS)
>         */
. 
.         // lasso2 
.         tempname lasso2est
117.         ereturn clear
118.          timer on 8
119.         lasso2 y x1-x`p' if `esample', 
120.          timer off 8
121.         estimates store `lasso2est'
122.         
.                 // with aic 
.                  timer on 9
123.                 lasso2, lic(aic) postest
124.                  timer off 9
125.                 local shat_aic = e(s)
126.                 local sel_aic = e(selected)
127.                 tempvar xb_aic xb_aic_ols
128.                 predict double `xb_aic', xb
129.                 predict double `xb_aic_ols', xb  ols
130.                 mat beta_aic            = e(betaAll)
131.                 mat beta_aic_ols        = e(betaAllOLS)
132.                 
.                 // with bic
.                 estimates restore `lasso2est'
133.                 lasso2, lic(bic) postest
134.                 local shat_bic = e(s)
135.                 local sel_bic = e(selected)
136.                 tempvar xb_bic xb_bic_ols
137.                 predict double `xb_bic', xb
138.                 predict double `xb_bic_ols', xb ols
139.                 mat beta_bic            = e(betaAll)
140.                 mat beta_bic_ols        = e(betaAllOLS)
141.                 
.                 // with ebic
.                 estimates restore `lasso2est'
142.                 lasso2, lic(ebic) postest
143.                 local shat_ebic = e(s)
144.                 local sel_ebic = e(selected)
145.                 tempvar xb_ebic xb_ebic_ols
146.                 predict double `xb_ebic', xb
147.                 predict double `xb_ebic_ols', xb ols
148.                 mat beta_ebic           = e(betaAll)
149.                 mat beta_ebic_ols       = e(betaAllOLS)
150.                 
.                 // with aicc
.                 estimates restore `lasso2est'
151.                 lasso2, lic(aicc) postest
152.                 local shat_aicc = e(s)
153.                 local sel_aicc = e(selected)
154.                 tempvar xb_aicc xb_aicc_ols
155.                 predict double `xb_aicc', xb
156.                 predict double `xb_aicc_ols', xb ols
157.                 mat beta_aicc           = e(betaAll)
158.                 mat beta_aicc_ols       = e(betaAllOLS)
159.         
.         ereturn clear // otherwise lasso2/cvlasso/results are returned
160.         
.         ** calculate false positive and false negative
.         foreach mthd of newlist  `swiselocal' ///
>                                                         ebic aic bic aicc /// 
>                                                         /// cvlasso /// cvelastic ///
>                                                         rlasso sqrt ///
>                                                         rxdep sxdep ///
>                                                         {
161.                 if (`design'==1) {
162.                         local fpos_vars: list sel_`mthd' - sel_oracle                           
163.                         local fneg_vars: list sel_oracle - sel_`mthd' 
164.                         local fpos_`mthd'       : word count `fpos_vars'
165.                         local fneg_`mthd'       : word count `fneg_vars'
166.                 }
167.                 else {
168.                         // placeholder
.                         local fpos_`mthd' = -1
169.                         local fneg_`mthd' = -1
170.                 }
171.         
.         }
172.         *
.         *** calculate L1norm and RMSE
.         foreach mthd of newlist `oraclelocal' ///
>                                                         `swiselocal' /// 
>                                                         rlasso rlasso_ols ///
>                                                         rxdep rxdep_ols ///
>                                                         sqrt sqrt_ols ///
>                                                         sxdep sxdep_ols /// 
>                                                         /// cvlasso cvlasso_ols ///
>                                                         ///`cvridgelocal' ///
>                                                         /// cvelastic cvelastic_ols ///
>                                                         aic aic_ols /// 
>                                                         bic bic_ols ///
>                                                         aicc aicc_ols ///
>                                                         ebic ebic_ols {
173.                 
.                 // compare true beta and beta-hat
.                 di "`mthd'"
174.                 comparevec, truemat(`BETA') estmat(beta_`mthd')
175.                 local l1norm_`mthd'     = r(l1norm)
176.                 return scalar l1norm_`mthd'     =`l1norm_`mthd'' 
177.                 
.                 // get rmse
.                 getrmse y `xb_`mthd'', esample(`esample')
178.                 local rmse_`mthd'               = r(rmse)
179.                 local rmse_oos_`mthd'   = r(rmse_oos)           
180.                 return scalar rmse_`mthd'               =`rmse_`mthd'' 
181.                 return scalar rmse_oos_`mthd'   =`rmse_oos_`mthd'' 
182.         }
183.         *
.         *** return fpos, fneg and shat
.         foreach mthd of newlist `swiselocal' ///
>                                                         ebic aic bic aicc /// 
>                                                         ///cvlasso /// cvelastic ///
>                                                         rlasso sqrt ///
>                                                         rxdep sxdep /// 
>                                                         {
184.         
.                 return scalar fpos_`mthd' = `fpos_`mthd''
185.                 return scalar fneg_`mthd' = `fneg_`mthd''
186.                 return scalar shat_`mthd' = `shat_`mthd''
187.         }
188.         *
.         // return simulation parameters
.         return scalar obs = `obs'
189.         return scalar p = `p'
190.         return scalar design = `design'
191.         return scalar sigma = `sigma'
192.         return scalar theta = `theta'
193.         return scalar alternate = `alternate'
194.         if (`design'==1) {
195.                 return scalar s = `s'
196.                 return scalar delta = -1
197.         }
198.         else {
199.                 return scalar s = -1
200.                 return scalar delta = `delta'
201.         }
202. end

. 
. ***************** end of program definitions ***********************************
. 
. timer clear

. 
. local mc=1

. foreach s in 0.5 1 2 3 5 {
  2.         
.         simulate , reps(300): mysim, obs(400) tobs(200) p(`thep') design(`thedesign') sigma(`s') alter(`thealternate')  
  3.         save "`c(pwd)'\out11\mc_p`thep'_alter`thealternate'_design`thedesign'_`mc'_bigp.dta", replace
  4.         local mc = `mc' + 1     
  5.         
. }

         command:  mysim, obs(400) tobs(200) p(220) design(2) sigma(0.5) alter(1)
           delta:  r(delta)
               s:  r(s)
       alternate:  r(alternate)
           theta:  r(theta)
           sigma:  r(sigma)
          design:  r(design)
               p:  r(p)
             obs:  r(obs)
      shat_sxdep:  r(shat_sxdep)
      fneg_sxdep:  r(fneg_sxdep)
      fpos_sxdep:  r(fpos_sxdep)
      shat_rxdep:  r(shat_rxdep)
      fneg_rxdep:  r(fneg_rxdep)
      fpos_rxdep:  r(fpos_rxdep)
       shat_sqrt:  r(shat_sqrt)
       fneg_sqrt:  r(fneg_sqrt)
       fpos_sqrt:  r(fpos_sqrt)
     shat_rlasso:  r(shat_rlasso)
     fneg_rlasso:  r(fneg_rlasso)
     fpos_rlasso:  r(fpos_rlasso)
       shat_aicc:  r(shat_aicc)
       fneg_aicc:  r(fneg_aicc)
       fpos_aicc:  r(fpos_aicc)
        shat_bic:  r(shat_bic)
        fneg_bic:  r(fneg_bic)
        fpos_bic:  r(fpos_bic)
        shat_aic:  r(shat_aic)
        fneg_aic:  r(fneg_aic)
        fpos_aic:  r(fpos_aic)
       shat_ebic:  r(shat_ebic)
       fneg_ebic:  r(fneg_ebic)
       fpos_ebic:  r(fpos_ebic)
rmse_oos_ebic_~s:  r(rmse_oos_ebic_ols)
   rmse_ebic_ols:  r(rmse_ebic_ols)
 l1norm_ebic_ols:  r(l1norm_ebic_ols)
   rmse_oos_ebic:  r(rmse_oos_ebic)
       rmse_ebic:  r(rmse_ebic)
     l1norm_ebic:  r(l1norm_ebic)
rmse_oos_aicc_~s:  r(rmse_oos_aicc_ols)
   rmse_aicc_ols:  r(rmse_aicc_ols)
 l1norm_aicc_ols:  r(l1norm_aicc_ols)
   rmse_oos_aicc:  r(rmse_oos_aicc)
       rmse_aicc:  r(rmse_aicc)
     l1norm_aicc:  r(l1norm_aicc)
rmse_oos_bic_ols:  r(rmse_oos_bic_ols)
    rmse_bic_ols:  r(rmse_bic_ols)
  l1norm_bic_ols:  r(l1norm_bic_ols)
    rmse_oos_bic:  r(rmse_oos_bic)
        rmse_bic:  r(rmse_bic)
      l1norm_bic:  r(l1norm_bic)
rmse_oos_aic_ols:  r(rmse_oos_aic_ols)
    rmse_aic_ols:  r(rmse_aic_ols)
  l1norm_aic_ols:  r(l1norm_aic_ols)
    rmse_oos_aic:  r(rmse_oos_aic)
        rmse_aic:  r(rmse_aic)
      l1norm_aic:  r(l1norm_aic)
rmse_oos_sxdep~s:  r(rmse_oos_sxdep_ols)
  rmse_sxdep_ols:  r(rmse_sxdep_ols)
l1norm_sxdep_ols:  r(l1norm_sxdep_ols)
  rmse_oos_sxdep:  r(rmse_oos_sxdep)
      rmse_sxdep:  r(rmse_sxdep)
    l1norm_sxdep:  r(l1norm_sxdep)
rmse_oos_sqrt_~s:  r(rmse_oos_sqrt_ols)
   rmse_sqrt_ols:  r(rmse_sqrt_ols)
 l1norm_sqrt_ols:  r(l1norm_sqrt_ols)
   rmse_oos_sqrt:  r(rmse_oos_sqrt)
       rmse_sqrt:  r(rmse_sqrt)
     l1norm_sqrt:  r(l1norm_sqrt)
rmse_oos_rxdep~s:  r(rmse_oos_rxdep_ols)
  rmse_rxdep_ols:  r(rmse_rxdep_ols)
l1norm_rxdep_ols:  r(l1norm_rxdep_ols)
  rmse_oos_rxdep:  r(rmse_oos_rxdep)
      rmse_rxdep:  r(rmse_rxdep)
    l1norm_rxdep:  r(l1norm_rxdep)
rmse_oos_rlass~s:  r(rmse_oos_rlasso_ols)
 rmse_rlasso_ols:  r(rmse_rlasso_ols)
l1norm_rlasso_~s:  r(l1norm_rlasso_ols)
 rmse_oos_rlasso:  r(rmse_oos_rlasso)
     rmse_rlasso:  r(rmse_rlasso)
   l1norm_rlasso:  r(l1norm_rlasso)

Simulations (300)
----+--- 1 ---+--- 2 ---+--- 3 ---+--- 4 ---+--- 5 
..................................................    50
..................................................   100
..................................................   150
..................................................   200
..................................................   250
..................................................   300
(note: file C:\Users\Achim.Ahrens\Dropbox\statalasso\Lassopack_MC\out11\mc_p220_alter1_design2_1_bigp.dta not found)
file C:\Users\Achim.Ahrens\Dropbox\statalasso\Lassopack_MC\out11\mc_p220_alter1_design2_1_bigp.dta saved

         command:  mysim, obs(400) tobs(200) p(220) design(2) sigma(1) alter(1)
           delta:  r(delta)
               s:  r(s)
       alternate:  r(alternate)
           theta:  r(theta)
           sigma:  r(sigma)
          design:  r(design)
               p:  r(p)
             obs:  r(obs)
      shat_sxdep:  r(shat_sxdep)
      fneg_sxdep:  r(fneg_sxdep)
      fpos_sxdep:  r(fpos_sxdep)
      shat_rxdep:  r(shat_rxdep)
      fneg_rxdep:  r(fneg_rxdep)
      fpos_rxdep:  r(fpos_rxdep)
       shat_sqrt:  r(shat_sqrt)
       fneg_sqrt:  r(fneg_sqrt)
       fpos_sqrt:  r(fpos_sqrt)
     shat_rlasso:  r(shat_rlasso)
     fneg_rlasso:  r(fneg_rlasso)
     fpos_rlasso:  r(fpos_rlasso)
       shat_aicc:  r(shat_aicc)
       fneg_aicc:  r(fneg_aicc)
       fpos_aicc:  r(fpos_aicc)
        shat_bic:  r(shat_bic)
        fneg_bic:  r(fneg_bic)
        fpos_bic:  r(fpos_bic)
        shat_aic:  r(shat_aic)
        fneg_aic:  r(fneg_aic)
        fpos_aic:  r(fpos_aic)
       shat_ebic:  r(shat_ebic)
       fneg_ebic:  r(fneg_ebic)
       fpos_ebic:  r(fpos_ebic)
rmse_oos_ebic_~s:  r(rmse_oos_ebic_ols)
   rmse_ebic_ols:  r(rmse_ebic_ols)
 l1norm_ebic_ols:  r(l1norm_ebic_ols)
   rmse_oos_ebic:  r(rmse_oos_ebic)
       rmse_ebic:  r(rmse_ebic)
     l1norm_ebic:  r(l1norm_ebic)
rmse_oos_aicc_~s:  r(rmse_oos_aicc_ols)
   rmse_aicc_ols:  r(rmse_aicc_ols)
 l1norm_aicc_ols:  r(l1norm_aicc_ols)
   rmse_oos_aicc:  r(rmse_oos_aicc)
       rmse_aicc:  r(rmse_aicc)
     l1norm_aicc:  r(l1norm_aicc)
rmse_oos_bic_ols:  r(rmse_oos_bic_ols)
    rmse_bic_ols:  r(rmse_bic_ols)
  l1norm_bic_ols:  r(l1norm_bic_ols)
    rmse_oos_bic:  r(rmse_oos_bic)
        rmse_bic:  r(rmse_bic)
      l1norm_bic:  r(l1norm_bic)
rmse_oos_aic_ols:  r(rmse_oos_aic_ols)
    rmse_aic_ols:  r(rmse_aic_ols)
  l1norm_aic_ols:  r(l1norm_aic_ols)
    rmse_oos_aic:  r(rmse_oos_aic)
        rmse_aic:  r(rmse_aic)
      l1norm_aic:  r(l1norm_aic)
rmse_oos_sxdep~s:  r(rmse_oos_sxdep_ols)
  rmse_sxdep_ols:  r(rmse_sxdep_ols)
l1norm_sxdep_ols:  r(l1norm_sxdep_ols)
  rmse_oos_sxdep:  r(rmse_oos_sxdep)
      rmse_sxdep:  r(rmse_sxdep)
    l1norm_sxdep:  r(l1norm_sxdep)
rmse_oos_sqrt_~s:  r(rmse_oos_sqrt_ols)
   rmse_sqrt_ols:  r(rmse_sqrt_ols)
 l1norm_sqrt_ols:  r(l1norm_sqrt_ols)
   rmse_oos_sqrt:  r(rmse_oos_sqrt)
       rmse_sqrt:  r(rmse_sqrt)
     l1norm_sqrt:  r(l1norm_sqrt)
rmse_oos_rxdep~s:  r(rmse_oos_rxdep_ols)
  rmse_rxdep_ols:  r(rmse_rxdep_ols)
l1norm_rxdep_ols:  r(l1norm_rxdep_ols)
  rmse_oos_rxdep:  r(rmse_oos_rxdep)
      rmse_rxdep:  r(rmse_rxdep)
    l1norm_rxdep:  r(l1norm_rxdep)
rmse_oos_rlass~s:  r(rmse_oos_rlasso_ols)
 rmse_rlasso_ols:  r(rmse_rlasso_ols)
l1norm_rlasso_~s:  r(l1norm_rlasso_ols)
 rmse_oos_rlasso:  r(rmse_oos_rlasso)
     rmse_rlasso:  r(rmse_rlasso)
   l1norm_rlasso:  r(l1norm_rlasso)

Simulations (300)
----+--- 1 ---+--- 2 ---+--- 3 ---+--- 4 ---+--- 5 
..................................................    50
..................................................   100
..................................................   150
..................................................   200
..................................................   250
..................................................   300
(note: file C:\Users\Achim.Ahrens\Dropbox\statalasso\Lassopack_MC\out11\mc_p220_alter1_design2_2_bigp.dta not found)
file C:\Users\Achim.Ahrens\Dropbox\statalasso\Lassopack_MC\out11\mc_p220_alter1_design2_2_bigp.dta saved

         command:  mysim, obs(400) tobs(200) p(220) design(2) sigma(2) alter(1)
           delta:  r(delta)
               s:  r(s)
       alternate:  r(alternate)
           theta:  r(theta)
           sigma:  r(sigma)
          design:  r(design)
               p:  r(p)
             obs:  r(obs)
      shat_sxdep:  r(shat_sxdep)
      fneg_sxdep:  r(fneg_sxdep)
      fpos_sxdep:  r(fpos_sxdep)
      shat_rxdep:  r(shat_rxdep)
      fneg_rxdep:  r(fneg_rxdep)
      fpos_rxdep:  r(fpos_rxdep)
       shat_sqrt:  r(shat_sqrt)
       fneg_sqrt:  r(fneg_sqrt)
       fpos_sqrt:  r(fpos_sqrt)
     shat_rlasso:  r(shat_rlasso)
     fneg_rlasso:  r(fneg_rlasso)
     fpos_rlasso:  r(fpos_rlasso)
       shat_aicc:  r(shat_aicc)
       fneg_aicc:  r(fneg_aicc)
       fpos_aicc:  r(fpos_aicc)
        shat_bic:  r(shat_bic)
        fneg_bic:  r(fneg_bic)
        fpos_bic:  r(fpos_bic)
        shat_aic:  r(shat_aic)
        fneg_aic:  r(fneg_aic)
        fpos_aic:  r(fpos_aic)
       shat_ebic:  r(shat_ebic)
       fneg_ebic:  r(fneg_ebic)
       fpos_ebic:  r(fpos_ebic)
rmse_oos_ebic_~s:  r(rmse_oos_ebic_ols)
   rmse_ebic_ols:  r(rmse_ebic_ols)
 l1norm_ebic_ols:  r(l1norm_ebic_ols)
   rmse_oos_ebic:  r(rmse_oos_ebic)
       rmse_ebic:  r(rmse_ebic)
     l1norm_ebic:  r(l1norm_ebic)
rmse_oos_aicc_~s:  r(rmse_oos_aicc_ols)
   rmse_aicc_ols:  r(rmse_aicc_ols)
 l1norm_aicc_ols:  r(l1norm_aicc_ols)
   rmse_oos_aicc:  r(rmse_oos_aicc)
       rmse_aicc:  r(rmse_aicc)
     l1norm_aicc:  r(l1norm_aicc)
rmse_oos_bic_ols:  r(rmse_oos_bic_ols)
    rmse_bic_ols:  r(rmse_bic_ols)
  l1norm_bic_ols:  r(l1norm_bic_ols)
    rmse_oos_bic:  r(rmse_oos_bic)
        rmse_bic:  r(rmse_bic)
      l1norm_bic:  r(l1norm_bic)
rmse_oos_aic_ols:  r(rmse_oos_aic_ols)
    rmse_aic_ols:  r(rmse_aic_ols)
  l1norm_aic_ols:  r(l1norm_aic_ols)
    rmse_oos_aic:  r(rmse_oos_aic)
        rmse_aic:  r(rmse_aic)
      l1norm_aic:  r(l1norm_aic)
rmse_oos_sxdep~s:  r(rmse_oos_sxdep_ols)
  rmse_sxdep_ols:  r(rmse_sxdep_ols)
l1norm_sxdep_ols:  r(l1norm_sxdep_ols)
  rmse_oos_sxdep:  r(rmse_oos_sxdep)
      rmse_sxdep:  r(rmse_sxdep)
    l1norm_sxdep:  r(l1norm_sxdep)
rmse_oos_sqrt_~s:  r(rmse_oos_sqrt_ols)
   rmse_sqrt_ols:  r(rmse_sqrt_ols)
 l1norm_sqrt_ols:  r(l1norm_sqrt_ols)
   rmse_oos_sqrt:  r(rmse_oos_sqrt)
       rmse_sqrt:  r(rmse_sqrt)
     l1norm_sqrt:  r(l1norm_sqrt)
rmse_oos_rxdep~s:  r(rmse_oos_rxdep_ols)
  rmse_rxdep_ols:  r(rmse_rxdep_ols)
l1norm_rxdep_ols:  r(l1norm_rxdep_ols)
  rmse_oos_rxdep:  r(rmse_oos_rxdep)
      rmse_rxdep:  r(rmse_rxdep)
    l1norm_rxdep:  r(l1norm_rxdep)
rmse_oos_rlass~s:  r(rmse_oos_rlasso_ols)
 rmse_rlasso_ols:  r(rmse_rlasso_ols)
l1norm_rlasso_~s:  r(l1norm_rlasso_ols)
 rmse_oos_rlasso:  r(rmse_oos_rlasso)
     rmse_rlasso:  r(rmse_rlasso)
   l1norm_rlasso:  r(l1norm_rlasso)

Simulations (300)
----+--- 1 ---+--- 2 ---+--- 3 ---+--- 4 ---+--- 5 
..x............x..............x...................    50
......x...............x.x......x.............xx...   100
.................x.................x..............   150
..x...x............x..............................   200
x.......x.x...x...................x...............   250
...........x...............x..x................x..   300
(note: file C:\Users\Achim.Ahrens\Dropbox\statalasso\Lassopack_MC\out11\mc_p220_alter1_design2_3_bigp.dta not found)
file C:\Users\Achim.Ahrens\Dropbox\statalasso\Lassopack_MC\out11\mc_p220_alter1_design2_3_bigp.dta saved

         command:  mysim, obs(400) tobs(200) p(220) design(2) sigma(3) alter(1)
           delta:  r(delta)
               s:  r(s)
       alternate:  r(alternate)
           theta:  r(theta)
           sigma:  r(sigma)
          design:  r(design)
               p:  r(p)
             obs:  r(obs)
      shat_sxdep:  r(shat_sxdep)
      fneg_sxdep:  r(fneg_sxdep)
      fpos_sxdep:  r(fpos_sxdep)
      shat_rxdep:  r(shat_rxdep)
      fneg_rxdep:  r(fneg_rxdep)
      fpos_rxdep:  r(fpos_rxdep)
       shat_sqrt:  r(shat_sqrt)
       fneg_sqrt:  r(fneg_sqrt)
       fpos_sqrt:  r(fpos_sqrt)
     shat_rlasso:  r(shat_rlasso)
     fneg_rlasso:  r(fneg_rlasso)
     fpos_rlasso:  r(fpos_rlasso)
       shat_aicc:  r(shat_aicc)
       fneg_aicc:  r(fneg_aicc)
       fpos_aicc:  r(fpos_aicc)
        shat_bic:  r(shat_bic)
        fneg_bic:  r(fneg_bic)
        fpos_bic:  r(fpos_bic)
        shat_aic:  r(shat_aic)
        fneg_aic:  r(fneg_aic)
        fpos_aic:  r(fpos_aic)
       shat_ebic:  r(shat_ebic)
       fneg_ebic:  r(fneg_ebic)
       fpos_ebic:  r(fpos_ebic)
rmse_oos_ebic_~s:  r(rmse_oos_ebic_ols)
   rmse_ebic_ols:  r(rmse_ebic_ols)
 l1norm_ebic_ols:  r(l1norm_ebic_ols)
   rmse_oos_ebic:  r(rmse_oos_ebic)
       rmse_ebic:  r(rmse_ebic)
     l1norm_ebic:  r(l1norm_ebic)
rmse_oos_aicc_~s:  r(rmse_oos_aicc_ols)
   rmse_aicc_ols:  r(rmse_aicc_ols)
 l1norm_aicc_ols:  r(l1norm_aicc_ols)
   rmse_oos_aicc:  r(rmse_oos_aicc)
       rmse_aicc:  r(rmse_aicc)
     l1norm_aicc:  r(l1norm_aicc)
rmse_oos_bic_ols:  r(rmse_oos_bic_ols)
    rmse_bic_ols:  r(rmse_bic_ols)
  l1norm_bic_ols:  r(l1norm_bic_ols)
    rmse_oos_bic:  r(rmse_oos_bic)
        rmse_bic:  r(rmse_bic)
      l1norm_bic:  r(l1norm_bic)
rmse_oos_aic_ols:  r(rmse_oos_aic_ols)
    rmse_aic_ols:  r(rmse_aic_ols)
  l1norm_aic_ols:  r(l1norm_aic_ols)
    rmse_oos_aic:  r(rmse_oos_aic)
        rmse_aic:  r(rmse_aic)
      l1norm_aic:  r(l1norm_aic)
rmse_oos_sxdep~s:  r(rmse_oos_sxdep_ols)
  rmse_sxdep_ols:  r(rmse_sxdep_ols)
l1norm_sxdep_ols:  r(l1norm_sxdep_ols)
  rmse_oos_sxdep:  r(rmse_oos_sxdep)
      rmse_sxdep:  r(rmse_sxdep)
    l1norm_sxdep:  r(l1norm_sxdep)
rmse_oos_sqrt_~s:  r(rmse_oos_sqrt_ols)
   rmse_sqrt_ols:  r(rmse_sqrt_ols)
 l1norm_sqrt_ols:  r(l1norm_sqrt_ols)
   rmse_oos_sqrt:  r(rmse_oos_sqrt)
       rmse_sqrt:  r(rmse_sqrt)
     l1norm_sqrt:  r(l1norm_sqrt)
rmse_oos_rxdep~s:  r(rmse_oos_rxdep_ols)
  rmse_rxdep_ols:  r(rmse_rxdep_ols)
l1norm_rxdep_ols:  r(l1norm_rxdep_ols)
  rmse_oos_rxdep:  r(rmse_oos_rxdep)
      rmse_rxdep:  r(rmse_rxdep)
    l1norm_rxdep:  r(l1norm_rxdep)
rmse_oos_rlass~s:  r(rmse_oos_rlasso_ols)
 rmse_rlasso_ols:  r(rmse_rlasso_ols)
l1norm_rlasso_~s:  r(l1norm_rlasso_ols)
 rmse_oos_rlasso:  r(rmse_oos_rlasso)
     rmse_rlasso:  r(rmse_rlasso)
   l1norm_rlasso:  r(l1norm_rlasso)

Simulations (300)
----+--- 1 ---+--- 2 ---+--- 3 ---+--- 4 ---+--- 5 
.x.xxx....xx....x..x...x.x..xx..x...xx.xx.x.x.xx..    50
.....x..xxxx.x....xxx.....xx.xx..x...x.x..xx.xx.x.   100
....x.xx...x.xxxx....x.xx..x.......xx......x......   150
x.x.x.xxxxxx..x......x..x..xxx.x..x....xxx....x...   200
x.x..x.x....x...xx...x....xx....xxx.....x....xxx.x   250
.x.xx.x.x.x..x..x.xx.x..x..x.x....x...x....xxx...x   300
(note: file C:\Users\Achim.Ahrens\Dropbox\statalasso\Lassopack_MC\out11\mc_p220_alter1_design2_4_bigp.dta not found)
file C:\Users\Achim.Ahrens\Dropbox\statalasso\Lassopack_MC\out11\mc_p220_alter1_design2_4_bigp.dta saved

         command:  mysim, obs(400) tobs(200) p(220) design(2) sigma(5) alter(1)
           delta:  r(delta)
               s:  r(s)
       alternate:  r(alternate)
           theta:  r(theta)
           sigma:  r(sigma)
          design:  r(design)
               p:  r(p)
             obs:  r(obs)
      shat_sxdep:  r(shat_sxdep)
      fneg_sxdep:  r(fneg_sxdep)
      fpos_sxdep:  r(fpos_sxdep)
      shat_rxdep:  r(shat_rxdep)
      fneg_rxdep:  r(fneg_rxdep)
      fpos_rxdep:  r(fpos_rxdep)
       shat_sqrt:  r(shat_sqrt)
       fneg_sqrt:  r(fneg_sqrt)
       fpos_sqrt:  r(fpos_sqrt)
     shat_rlasso:  r(shat_rlasso)
     fneg_rlasso:  r(fneg_rlasso)
     fpos_rlasso:  r(fpos_rlasso)
       shat_aicc:  r(shat_aicc)
       fneg_aicc:  r(fneg_aicc)
       fpos_aicc:  r(fpos_aicc)
        shat_bic:  r(shat_bic)
        fneg_bic:  r(fneg_bic)
        fpos_bic:  r(fpos_bic)
        shat_aic:  r(shat_aic)
        fneg_aic:  r(fneg_aic)
        fpos_aic:  r(fpos_aic)
       shat_ebic:  r(shat_ebic)
       fneg_ebic:  r(fneg_ebic)
       fpos_ebic:  r(fpos_ebic)
rmse_oos_ebic_~s:  r(rmse_oos_ebic_ols)
   rmse_ebic_ols:  r(rmse_ebic_ols)
 l1norm_ebic_ols:  r(l1norm_ebic_ols)
   rmse_oos_ebic:  r(rmse_oos_ebic)
       rmse_ebic:  r(rmse_ebic)
     l1norm_ebic:  r(l1norm_ebic)
rmse_oos_aicc_~s:  r(rmse_oos_aicc_ols)
   rmse_aicc_ols:  r(rmse_aicc_ols)
 l1norm_aicc_ols:  r(l1norm_aicc_ols)
   rmse_oos_aicc:  r(rmse_oos_aicc)
       rmse_aicc:  r(rmse_aicc)
     l1norm_aicc:  r(l1norm_aicc)
rmse_oos_bic_ols:  r(rmse_oos_bic_ols)
    rmse_bic_ols:  r(rmse_bic_ols)
  l1norm_bic_ols:  r(l1norm_bic_ols)
    rmse_oos_bic:  r(rmse_oos_bic)
        rmse_bic:  r(rmse_bic)
      l1norm_bic:  r(l1norm_bic)
rmse_oos_aic_ols:  r(rmse_oos_aic_ols)
    rmse_aic_ols:  r(rmse_aic_ols)
  l1norm_aic_ols:  r(l1norm_aic_ols)
    rmse_oos_aic:  r(rmse_oos_aic)
        rmse_aic:  r(rmse_aic)
      l1norm_aic:  r(l1norm_aic)
rmse_oos_sxdep~s:  r(rmse_oos_sxdep_ols)
  rmse_sxdep_ols:  r(rmse_sxdep_ols)
l1norm_sxdep_ols:  r(l1norm_sxdep_ols)
  rmse_oos_sxdep:  r(rmse_oos_sxdep)
      rmse_sxdep:  r(rmse_sxdep)
    l1norm_sxdep:  r(l1norm_sxdep)
rmse_oos_sqrt_~s:  r(rmse_oos_sqrt_ols)
   rmse_sqrt_ols:  r(rmse_sqrt_ols)
 l1norm_sqrt_ols:  r(l1norm_sqrt_ols)
   rmse_oos_sqrt:  r(rmse_oos_sqrt)
       rmse_sqrt:  r(rmse_sqrt)
     l1norm_sqrt:  r(l1norm_sqrt)
rmse_oos_rxdep~s:  r(rmse_oos_rxdep_ols)
  rmse_rxdep_ols:  r(rmse_rxdep_ols)
l1norm_rxdep_ols:  r(l1norm_rxdep_ols)
  rmse_oos_rxdep:  r(rmse_oos_rxdep)
      rmse_rxdep:  r(rmse_rxdep)
    l1norm_rxdep:  r(l1norm_rxdep)
rmse_oos_rlass~s:  r(rmse_oos_rlasso_ols)
 rmse_rlasso_ols:  r(rmse_rlasso_ols)
l1norm_rlasso_~s:  r(l1norm_rlasso_ols)
 rmse_oos_rlasso:  r(rmse_oos_rlasso)
     rmse_rlasso:  r(rmse_rlasso)
   l1norm_rlasso:  r(l1norm_rlasso)

Simulations (300)
----+--- 1 ---+--- 2 ---+--- 3 ---+--- 4 ---+--- 5 
.xx.xxxxxx.xxxx.xxxxxxxxxxxxxx.xxxxx.xxxxx.xxxxxxx    50
xxx..x...xxxxxxxxxxxxxxxxxxxx.xxxxxxxxxxx.xxxxxxxx   100
xxxxxxxxxxxx.x..xxxx.x.xxxxx.xxxx.xxxxxxxxxxxxxxxx   150
x.xxxxxxxxxx.x.xxxxx.xxxxxxxxxxxxxxx..xxxxxxx.x.xx   200
xxx.xxxxxxxxxxx.xxxxx.xxx.xxxxxxxxxxxxxxxxx.xxxxx.   250
xxxxxxxxxxxxxxxxx.xx.xxxxxxxxxxxxxxxxxxxxxxxxxxxxx   300
(note: file C:\Users\Achim.Ahrens\Dropbox\statalasso\Lassopack_MC\out11\mc_p220_alter1_design2_5_bigp.dta not found)
file C:\Users\Achim.Ahrens\Dropbox\statalasso\Lassopack_MC\out11\mc_p220_alter1_design2_5_bigp.dta saved

. *
. 
. timer list
   1:    329.73 /     1500 =       0.2198
   2:    928.12 /     1500 =       0.6187
   3:  10886.95 /     1500 =       7.2580
   4:  11529.63 /     1500 =       7.6864
   8:  84378.98 /     1500 =      56.2527
   9:   3462.18 /     1500 =       2.3081

. 
. log close
      name:  <unnamed>
       log:  C:\Users\Achim.Ahrens\Dropbox\statalasso\Lassopack_MC\out11\mc_log_p220_alter1_design2_bigp.log
  log type:  text
 closed on:  25 Oct 2018, 04:00:12
--------------------------------------------------------------------------------------------------------------------------------------------------------
